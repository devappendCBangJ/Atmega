
Microcontroller_Practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000023e  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010e  0080010e  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000938  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d8  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008e  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e3       	ldi	r30, 0x3E	; 62
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	ba c0       	rjmp	.+372    	; 0x23a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
uint8_t digi_sel[4] = {0x01, 0x02, 0x04, 0x08};
uint8_t fnd[4];
	
int main(){
	uint16_t count = 0;
	DDRC = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
	DDRF = 0x0f;
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
uint8_t digit[10] = {0x88, 0xBE, 0xC4, 0xA4, 0xB2, 0xA1, 0x83, 0xBC, 0x80, 0xB0};
uint8_t digi_sel[4] = {0x01, 0x02, 0x04, 0x08};
uint8_t fnd[4];
	
int main(){
	uint16_t count = 0;
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	f0 e0       	ldi	r31, 0x00	; 0
	DDRC = 0xff;
	DDRF = 0x0f;
	while(1){
		count++;
  d6:	31 96       	adiw	r30, 0x01	; 1
		if(count == 10000){
  d8:	e0 31       	cpi	r30, 0x10	; 16
  da:	27 e2       	ldi	r18, 0x27	; 39
  dc:	f2 07       	cpc	r31, r18
  de:	11 f4       	brne	.+4      	; 0xe4 <main+0x1c>
			count = 0;
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	f0 e0       	ldi	r31, 0x00	; 0
		}
		
		fnd[0] = (count/1000)%10;
  e4:	9f 01       	movw	r18, r30
  e6:	36 95       	lsr	r19
  e8:	27 95       	ror	r18
  ea:	36 95       	lsr	r19
  ec:	27 95       	ror	r18
  ee:	36 95       	lsr	r19
  f0:	27 95       	ror	r18
  f2:	a5 ec       	ldi	r26, 0xC5	; 197
  f4:	b0 e2       	ldi	r27, 0x20	; 32
  f6:	92 d0       	rcall	.+292    	; 0x21c <__umulhisi3>
  f8:	ac 01       	movw	r20, r24
  fa:	52 95       	swap	r21
  fc:	42 95       	swap	r20
  fe:	4f 70       	andi	r20, 0x0F	; 15
 100:	45 27       	eor	r20, r21
 102:	5f 70       	andi	r21, 0x0F	; 15
 104:	45 27       	eor	r20, r21
 106:	9a 01       	movw	r18, r20
 108:	ad ec       	ldi	r26, 0xCD	; 205
 10a:	bc ec       	ldi	r27, 0xCC	; 204
 10c:	87 d0       	rcall	.+270    	; 0x21c <__umulhisi3>
 10e:	96 95       	lsr	r25
 110:	87 95       	ror	r24
 112:	96 95       	lsr	r25
 114:	87 95       	ror	r24
 116:	96 95       	lsr	r25
 118:	87 95       	ror	r24
 11a:	9c 01       	movw	r18, r24
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	82 0f       	add	r24, r18
 12e:	93 1f       	adc	r25, r19
 130:	da 01       	movw	r26, r20
 132:	a8 1b       	sub	r26, r24
 134:	b9 0b       	sbc	r27, r25
 136:	ce e0       	ldi	r28, 0x0E	; 14
 138:	d1 e0       	ldi	r29, 0x01	; 1
 13a:	a8 83       	st	Y, r26
		fnd[1] = (count/100)%10;
 13c:	9f 01       	movw	r18, r30
 13e:	36 95       	lsr	r19
 140:	27 95       	ror	r18
 142:	36 95       	lsr	r19
 144:	27 95       	ror	r18
 146:	ab e7       	ldi	r26, 0x7B	; 123
 148:	b4 e1       	ldi	r27, 0x14	; 20
 14a:	68 d0       	rcall	.+208    	; 0x21c <__umulhisi3>
 14c:	ac 01       	movw	r20, r24
 14e:	56 95       	lsr	r21
 150:	47 95       	ror	r20
 152:	9a 01       	movw	r18, r20
 154:	ad ec       	ldi	r26, 0xCD	; 205
 156:	bc ec       	ldi	r27, 0xCC	; 204
 158:	61 d0       	rcall	.+194    	; 0x21c <__umulhisi3>
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	9c 01       	movw	r18, r24
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	82 0f       	add	r24, r18
 17a:	93 1f       	adc	r25, r19
 17c:	9a 01       	movw	r18, r20
 17e:	28 1b       	sub	r18, r24
 180:	39 0b       	sbc	r19, r25
		fnd[2] = (count/10)%10;
 182:	29 83       	std	Y+1, r18	; 0x01
 184:	9f 01       	movw	r18, r30
 186:	4a d0       	rcall	.+148    	; 0x21c <__umulhisi3>
 188:	ac 01       	movw	r20, r24
 18a:	56 95       	lsr	r21
 18c:	47 95       	ror	r20
 18e:	56 95       	lsr	r21
 190:	47 95       	ror	r20
 192:	56 95       	lsr	r21
 194:	47 95       	ror	r20
 196:	9a 01       	movw	r18, r20
 198:	41 d0       	rcall	.+130    	; 0x21c <__umulhisi3>
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	9c 01       	movw	r18, r24
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	82 0f       	add	r24, r18
 1ba:	93 1f       	adc	r25, r19
 1bc:	da 01       	movw	r26, r20
 1be:	a8 1b       	sub	r26, r24
 1c0:	b9 0b       	sbc	r27, r25
 1c2:	aa 83       	std	Y+2, r26	; 0x02
		fnd[3] = count%10;
 1c4:	ca 01       	movw	r24, r20
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	44 0f       	add	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	48 0f       	add	r20, r24
 1d8:	59 1f       	adc	r21, r25
 1da:	cf 01       	movw	r24, r30
 1dc:	84 1b       	sub	r24, r20
 1de:	95 0b       	sbc	r25, r21
 1e0:	8b 83       	std	Y+3, r24	; 0x03
		for(int i = 0; i < 4; i++){
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	84 30       	cpi	r24, 0x04	; 4
 1e8:	91 05       	cpc	r25, r1
 1ea:	0c f0       	brlt	.+2      	; 0x1ee <main+0x126>
 1ec:	74 cf       	rjmp	.-280    	; 0xd6 <main+0xe>
			PORTC = digit[fnd[i]];
 1ee:	dc 01       	movw	r26, r24
 1f0:	a2 5f       	subi	r26, 0xF2	; 242
 1f2:	be 4f       	sbci	r27, 0xFE	; 254
 1f4:	ac 91       	ld	r26, X
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	ac 5f       	subi	r26, 0xFC	; 252
 1fa:	be 4f       	sbci	r27, 0xFE	; 254
 1fc:	2c 91       	ld	r18, X
 1fe:	25 bb       	out	0x15, r18	; 21
			PORTF = digi_sel[i];
 200:	dc 01       	movw	r26, r24
 202:	a0 50       	subi	r26, 0x00	; 0
 204:	bf 4f       	sbci	r27, 0xFF	; 255
 206:	2c 91       	ld	r18, X
 208:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	af e0       	ldi	r26, 0x0F	; 15
 20e:	b7 e2       	ldi	r27, 0x27	; 39
 210:	11 97       	sbiw	r26, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0x148>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x14e>
 216:	00 00       	nop
		
		fnd[0] = (count/1000)%10;
		fnd[1] = (count/100)%10;
		fnd[2] = (count/10)%10;
		fnd[3] = count%10;
		for(int i = 0; i < 4; i++){
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	e5 cf       	rjmp	.-54     	; 0x1e6 <main+0x11e>

0000021c <__umulhisi3>:
 21c:	a2 9f       	mul	r26, r18
 21e:	b0 01       	movw	r22, r0
 220:	b3 9f       	mul	r27, r19
 222:	c0 01       	movw	r24, r0
 224:	a3 9f       	mul	r26, r19
 226:	70 0d       	add	r23, r0
 228:	81 1d       	adc	r24, r1
 22a:	11 24       	eor	r1, r1
 22c:	91 1d       	adc	r25, r1
 22e:	b2 9f       	mul	r27, r18
 230:	70 0d       	add	r23, r0
 232:	81 1d       	adc	r24, r1
 234:	11 24       	eor	r1, r1
 236:	91 1d       	adc	r25, r1
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
