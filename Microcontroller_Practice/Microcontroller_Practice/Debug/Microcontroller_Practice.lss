
Microcontroller_Practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000885  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dc  00000000  00000000  00000b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000293  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3f d0       	rcall	.+126    	; 0x128 <main>
  aa:	64 c0       	rjmp	.+200    	; 0x174 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_1>:
#define TC0_NONINVERT_PWM (1<<COM01)
void initial ();
unsigned char vel;
enum {STOP, CW,STOP2, CCW} mode ;

ISR(INT0_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	if (mode==STOP) mode=CW;
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  be:	81 11       	cpse	r24, r1
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <__vector_1+0x1a>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (mode==CW) mode=STOP2;
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	19 f4       	brne	.+6      	; 0xd6 <__vector_1+0x28>
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (mode==STOP2) mode=CCW;
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	19 f4       	brne	.+6      	; 0xe4 <__vector_1+0x36>
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
if (mode==CCW) mode=STOP;}
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	11 f4       	brne	.+4      	; 0xf0 <__vector_1+0x42>
  ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <_Z7initialv>:
				OCR0=vel;
				break;
			}}}
			
void initial (){
	DDRB=0xff; DDRD=0x00; PORTD|=0x01;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	87 bb       	out	0x17, r24	; 23
 100:	11 ba       	out	0x11, r1	; 17
 102:	82 b3       	in	r24, 0x12	; 18
 104:	81 60       	ori	r24, 0x01	; 1
 106:	82 bb       	out	0x12, r24	; 18
	OCR0=0;
 108:	11 be       	out	0x31, r1	; 49
	TCCR0 |= TC0_FAST_PWM | TC0_NONINVERT_PWM
	| TC0_PRESCALE_32; //PRESCALE 32
 10a:	83 b7       	in	r24, 0x33	; 51
 10c:	8b 66       	ori	r24, 0x6B	; 107
 10e:	83 bf       	out	0x33, r24	; 51
	EICRA |= IE0_Detect_Falling; // Falling Edge
 110:	ea e6       	ldi	r30, 0x6A	; 106
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
 118:	80 81       	ld	r24, Z
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0); // Use Interrupt
 11e:	89 b7       	in	r24, 0x39	; 57
 120:	81 60       	ori	r24, 0x01	; 1
 122:	89 bf       	out	0x39, r24	; 57
	sei();
 124:	78 94       	sei
 126:	08 95       	ret

00000128 <main>:
	if (mode==STOP) mode=CW;
	if (mode==CW) mode=STOP2;
	if (mode==STOP2) mode=CCW;
if (mode==CCW) mode=STOP;}
int main(void) {
	mode=STOP;
 128:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	initial ();
 12c:	e7 df       	rcall	.-50     	; 0xfc <_Z7initialv>
	vel=100;
 12e:	84 e6       	ldi	r24, 0x64	; 100
 130:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <vel>
	while(1){
		switch (mode){
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	59 f0       	breq	.+22     	; 0x152 <main+0x2a>
 13c:	28 f0       	brcs	.+10     	; 0x148 <main+0x20>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	19 f0       	breq	.+6      	; 0x148 <main+0x20>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	79 f0       	breq	.+30     	; 0x164 <main+0x3c>
 146:	f6 cf       	rjmp	.-20     	; 0x134 <main+0xc>
			case STOP:
			case STOP2:
				PORTB &=~(1<<IN1);
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	8f 77       	andi	r24, 0x7F	; 127
 14c:	88 bb       	out	0x18, r24	; 24
				OCR0=0;
 14e:	11 be       	out	0x31, r1	; 49
				break;
 150:	f1 cf       	rjmp	.-30     	; 0x134 <main+0xc>
			case CW:
				PORTB|=(1<<IN1);
 152:	88 b3       	in	r24, 0x18	; 24
 154:	80 68       	ori	r24, 0x80	; 128
 156:	88 bb       	out	0x18, r24	; 24
				vel=0.3*255; //70%
 158:	8c e4       	ldi	r24, 0x4C	; 76
 15a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <vel>
				OCR0=255-vel;
 15e:	83 eb       	ldi	r24, 0xB3	; 179
 160:	81 bf       	out	0x31, r24	; 49
				break;
 162:	e8 cf       	rjmp	.-48     	; 0x134 <main+0xc>
			case CCW:
				PORTB &=~(1<<IN1);
 164:	88 b3       	in	r24, 0x18	; 24
 166:	8f 77       	andi	r24, 0x7F	; 127
 168:	88 bb       	out	0x18, r24	; 24
				vel=0.4*255; //40%
 16a:	86 e6       	ldi	r24, 0x66	; 102
 16c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <vel>
				OCR0=vel;
 170:	81 bf       	out	0x31, r24	; 49
				break;
 172:	e0 cf       	rjmp	.-64     	; 0x134 <main+0xc>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
