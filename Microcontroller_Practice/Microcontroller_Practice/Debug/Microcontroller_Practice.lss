
Microcontroller_Practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000882  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c3  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023d  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	3c d0       	rcall	.+120    	; 0x112 <main>
  9a:	47 c0       	rjmp	.+142    	; 0x12a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_Z5delayi>:
		PORTA = 0x00;
		delay(1);
	}
}

void delay(int sec){
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <_Z5delayi+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <_Z5delayi+0x8>
  a6:	00 d0       	rcall	.+0      	; 0xa8 <_Z5delayi+0xa>
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	volatile int i, j, k;
	for (i = 0; i < sec; i++)
  ac:	1a 82       	std	Y+2, r1	; 0x02
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	29 81       	ldd	r18, Y+1	; 0x01
  b2:	3a 81       	ldd	r19, Y+2	; 0x02
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	1c f5       	brge	.+70     	; 0x100 <_Z5delayi+0x62>
	for (j = 0; j < 1000; j++)
  ba:	1c 82       	std	Y+4, r1	; 0x04
  bc:	1b 82       	std	Y+3, r1	; 0x03
  be:	2b 81       	ldd	r18, Y+3	; 0x03
  c0:	3c 81       	ldd	r19, Y+4	; 0x04
  c2:	28 3e       	cpi	r18, 0xE8	; 232
  c4:	33 40       	sbci	r19, 0x03	; 3
  c6:	ac f4       	brge	.+42     	; 0xf2 <_Z5delayi+0x54>
	for (k = 0; k < 1000; k++);
  c8:	1e 82       	std	Y+6, r1	; 0x06
  ca:	1d 82       	std	Y+5, r1	; 0x05
  cc:	2d 81       	ldd	r18, Y+5	; 0x05
  ce:	3e 81       	ldd	r19, Y+6	; 0x06
  d0:	28 3e       	cpi	r18, 0xE8	; 232
  d2:	33 40       	sbci	r19, 0x03	; 3
  d4:	3c f4       	brge	.+14     	; 0xe4 <_Z5delayi+0x46>
  d6:	2d 81       	ldd	r18, Y+5	; 0x05
  d8:	3e 81       	ldd	r19, Y+6	; 0x06
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	3e 83       	std	Y+6, r19	; 0x06
  e0:	2d 83       	std	Y+5, r18	; 0x05
  e2:	f4 cf       	rjmp	.-24     	; 0xcc <_Z5delayi+0x2e>
}

void delay(int sec){
	volatile int i, j, k;
	for (i = 0; i < sec; i++)
	for (j = 0; j < 1000; j++)
  e4:	2b 81       	ldd	r18, Y+3	; 0x03
  e6:	3c 81       	ldd	r19, Y+4	; 0x04
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	3c 83       	std	Y+4, r19	; 0x04
  ee:	2b 83       	std	Y+3, r18	; 0x03
  f0:	e6 cf       	rjmp	.-52     	; 0xbe <_Z5delayi+0x20>
	}
}

void delay(int sec){
	volatile int i, j, k;
	for (i = 0; i < sec; i++)
  f2:	29 81       	ldd	r18, Y+1	; 0x01
  f4:	3a 81       	ldd	r19, Y+2	; 0x02
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	3a 83       	std	Y+2, r19	; 0x02
  fc:	29 83       	std	Y+1, r18	; 0x01
  fe:	d8 cf       	rjmp	.-80     	; 0xb0 <_Z5delayi+0x12>
	for (j = 0; j < 1000; j++)
	for (k = 0; k < 1000; k++);
}
 100:	26 96       	adiw	r28, 0x06	; 6
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <main>:

#include <avr/io.h>
void delay(int sec);

int main(){
	DDRA = 0x01;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	8a bb       	out	0x1a, r24	; 26
	while(1){
		PORTA = 0x01;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	8b bb       	out	0x1b, r24	; 27
		delay(1);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	bf df       	rcall	.-130    	; 0x9e <_Z5delayi>
		PORTA = 0x00;
 120:	1b ba       	out	0x1b, r1	; 27
		delay(1);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	bb df       	rcall	.-138    	; 0x9e <_Z5delayi>
 128:	f6 cf       	rjmp	.-20     	; 0x116 <main+0x4>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
